{
    "pipes": [],
    "interfaces": [
        {
            "name": "Time",
            "id": "interface-Time-bef5ff03da858791d47265c35e1ea187a17b5d56196e3d141188e71a1b348f48f965bb1228cac9f63aa262949f220caea5d21d4210b8cb9af069f4bec715cfff",
            "file": "src/app/component/exemple/dashboard/interface/time.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export type TypeCard =\r\n  | 'Work'\r\n  | 'Play'\r\n  | 'Study'\r\n  | 'Exercise'\r\n  | 'Social'\r\n  | 'Self Care';\r\n\r\nexport interface TimeFrame {\r\n  daily: {\r\n    current: number;\r\n    previous: number;\r\n  };\r\n  monthly: {\r\n    current: number;\r\n    previous: number;\r\n  };\r\n  weekly: {\r\n    current: number;\r\n    previous: number;\r\n  };\r\n}\r\n\r\nexport type DisplayType = 'weekly' | 'monthly' | 'daily';\r\n\r\nexport interface Time {\r\n  title: TypeCard;\r\n  timeframes: TimeFrame;\r\n}\r\n\r\nexport interface User {\r\n  firstName: string;\r\n  lastName: string;\r\n}\r\n",
            "properties": [
                {
                    "name": "timeframes",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TimeFrame",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TypeCard",
                    "optional": false,
                    "description": "",
                    "line": 27
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "TimeFrame",
            "id": "interface-TimeFrame-bef5ff03da858791d47265c35e1ea187a17b5d56196e3d141188e71a1b348f48f965bb1228cac9f63aa262949f220caea5d21d4210b8cb9af069f4bec715cfff",
            "file": "src/app/component/exemple/dashboard/interface/time.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export type TypeCard =\r\n  | 'Work'\r\n  | 'Play'\r\n  | 'Study'\r\n  | 'Exercise'\r\n  | 'Social'\r\n  | 'Self Care';\r\n\r\nexport interface TimeFrame {\r\n  daily: {\r\n    current: number;\r\n    previous: number;\r\n  };\r\n  monthly: {\r\n    current: number;\r\n    previous: number;\r\n  };\r\n  weekly: {\r\n    current: number;\r\n    previous: number;\r\n  };\r\n}\r\n\r\nexport type DisplayType = 'weekly' | 'monthly' | 'daily';\r\n\r\nexport interface Time {\r\n  title: TypeCard;\r\n  timeframes: TimeFrame;\r\n}\r\n\r\nexport interface User {\r\n  firstName: string;\r\n  lastName: string;\r\n}\r\n",
            "properties": [
                {
                    "name": "daily",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "monthly",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "weekly",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 18
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "User",
            "id": "interface-User-d4821beac0e4a852e513391b7470981c4353fdd95a18628bb68136c8695b489ee15b926e2e5031bc26cf30e1508e0a362c3ee13a06734702b4d15af140e485d5",
            "file": "src/stories/user.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface User {\n  name: string;\n}\n",
            "properties": [
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "User",
            "id": "interface-User-bef5ff03da858791d47265c35e1ea187a17b5d56196e3d141188e71a1b348f48f965bb1228cac9f63aa262949f220caea5d21d4210b8cb9af069f4bec715cfff-1",
            "file": "src/app/component/exemple/dashboard/interface/time.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export type TypeCard =\r\n  | 'Work'\r\n  | 'Play'\r\n  | 'Study'\r\n  | 'Exercise'\r\n  | 'Social'\r\n  | 'Self Care';\r\n\r\nexport interface TimeFrame {\r\n  daily: {\r\n    current: number;\r\n    previous: number;\r\n  };\r\n  monthly: {\r\n    current: number;\r\n    previous: number;\r\n  };\r\n  weekly: {\r\n    current: number;\r\n    previous: number;\r\n  };\r\n}\r\n\r\nexport type DisplayType = 'weekly' | 'monthly' | 'daily';\r\n\r\nexport interface Time {\r\n  title: TypeCard;\r\n  timeframes: TimeFrame;\r\n}\r\n\r\nexport interface User {\r\n  firstName: string;\r\n  lastName: string;\r\n}\r\n",
            "properties": [
                {
                    "name": "firstName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "lastName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 33
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": [],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "User-1"
        }
    ],
    "injectables": [],
    "guards": [],
    "interceptors": [],
    "classes": [],
    "directives": [
        {
            "name": "NoWrapper",
            "id": "directive-NoWrapper-e188cfec075f23365b054898c0e6cc319413603c5d1d2e092d9b0dfab6b7d4c60dba384e5a9f0330dc8d13892a16d8e4b45626304f93542c50f4d49141c0761a",
            "file": "src/app/component/exemple/dashboard/layout/dashboard/no-wrapper.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Directive, ViewContainerRef, TemplateRef } from '@angular/core';\r\n\r\n@Directive({\r\n  selector: '[noWrapper]',\r\n  standalone: true,\r\n})\r\nexport class NoWrapper {\r\n  constructor(\r\n    private viewContainer: ViewContainerRef,\r\n    private templateRef: TemplateRef<any>\r\n  ) {}\r\n\r\n  ngOnInit() {\r\n    this.viewContainer.createEmbeddedView(this.templateRef);\r\n  }\r\n}\r\n",
            "selector": "[noWrapper]",
            "providers": [],
            "hostDirectives": [],
            "standalone": true,
            "inputsClass": [],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 13,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "extends": [],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "viewContainer",
                        "type": "ViewContainerRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "templateRef",
                        "type": "TemplateRef<any>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 7,
                "jsdoctags": [
                    {
                        "name": "viewContainer",
                        "type": "ViewContainerRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "templateRef",
                        "type": "TemplateRef<any>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        }
    ],
    "components": [
        {
            "name": "AppComponent",
            "id": "component-AppComponent-39282078df6e099c17e8d0f3f0eb5d5ec39e1700a6d1806e4ce4e932f8d12c6eddc839cfd0562e9ff9ff937f33b91e1b86f794d664460a22c15e280234a19c1e",
            "file": "src/app/app.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-root",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./app.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "title",
                    "defaultValue": "'angular_storybook'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 12
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "RouterOutlet"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\nimport { RouterOutlet } from '@angular/router';\r\n\r\n@Component({\r\n  selector: 'app-root',\r\n  standalone: true,\r\n  imports: [RouterOutlet],\r\n  templateUrl: './app.component.html',\r\n  styleUrl: './app.component.scss',\r\n})\r\nexport class AppComponent {\r\n  title = 'angular_storybook';\r\n}\r\n",
            "styleUrl": "./app.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<main class=\"main\"></main>\r\n\r\n<router-outlet />\r\n"
        },
        {
            "name": "ButtonComponent",
            "id": "component-ButtonComponent-ee1153818ab8b244dc0e52483819b2a1a77954be4f47f92414df75f943f8f5062d763340cdc54a4bc5aec159666b000b384a81d2977418888b3e8ef9807e3b8a",
            "file": "src/stories/button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-button",
            "styleUrls": [
                "./button.css"
            ],
            "styles": [],
            "template": "<button   type=\"button\"\n   (click)=\"onClick.emit($event)\"\n   [ngClass]=\"classes\"\n   [ngStyle]=\"{ 'background-color': backgroundColor }\"\n >\n   <icon\n     *ngIf=\"iconLeft && !buttonIcon\"\n     [ngClass]=\"iconCLasses\"\n     icon=\"{{ isLoading ? 'refresh' : iconLeft }}\"\n     [size]=\"iconSize\"\n     [noBackground]=\"true\"\n   />\n   <span *ngIf=\"!buttonIcon\"> {{ label }}</span>\n   <icon\n     *ngIf=\"buttonIcon\"\n     [ngClass]=\"iconCLasses\"\n     icon=\"{{ isLoading ? 'refresh' : buttonIcon }}\"\n     [size]=\"iconSize\"\n     [noBackground]=\"true\"\n   />\n   <icon\n     [ngClass]=\"iconCLasses\"\n     *ngIf=\"iconRight && !buttonIcon\"\n     icon=\"{{ isLoading ? 'refresh' : iconRight }}\"\n     [size]=\"iconSize\"\n     [noBackground]=\"true\"\n   />\n </button>",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "backgroundColor",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nWhat background color to use\n",
                    "description": "<p>What background color to use</p>\n",
                    "line": 52,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "buttonIcon",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nButtonIcon\n",
                    "description": "<p>ButtonIcon</p>\n",
                    "line": 84,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "fullWidth",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nFullWidth button\n",
                    "description": "<p>FullWidth button</p>\n",
                    "line": 89,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "iconLeft",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nIcon Left\n",
                    "description": "<p>Icon Left</p>\n",
                    "line": 72,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "iconRight",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nIcon Left\n",
                    "description": "<p>Icon Left</p>\n",
                    "line": 78,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "isLoading",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nLoading state\n",
                    "description": "<p>Loading state</p>\n",
                    "line": 94,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "label",
                    "defaultValue": "'Button'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 1467,
                            "end": 1480,
                            "flags": 16842752,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 334,
                            "tagName": {
                                "pos": 1468,
                                "end": 1476,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "required"
                            },
                            "comment": ""
                        }
                    ],
                    "rawdescription": "\n\nButton contents\n\n",
                    "description": "<p>Button contents</p>\n",
                    "line": 66,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "primary",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nIs this the principal call to action on the page?\n",
                    "description": "<p>Is this the principal call to action on the page?</p>\n",
                    "line": 46,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "size",
                    "defaultValue": "'medium'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nHow large should the button be?\n",
                    "description": "<p>How large should the button be?</p>\n",
                    "line": 58,
                    "type": "\"small\" | \"medium\" | \"large\"",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onClick",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nOptional click handler\n",
                    "description": "<p>Optional click handler</p>\n",
                    "line": 100,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "Icon"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\nimport { Component, Input, Output, EventEmitter } from '@angular/core';\nimport { Icon } from '../app/component/exemple/materialUI/icon/icon';\n\n@Component({\n  selector: 'storybook-button',\n  standalone: true,\n  imports: [CommonModule, Icon],\n  template: ` <button\n    type=\"button\"\n    (click)=\"onClick.emit($event)\"\n    [ngClass]=\"classes\"\n    [ngStyle]=\"{ 'background-color': backgroundColor }\"\n  >\n    <icon\n      *ngIf=\"iconLeft && !buttonIcon\"\n      [ngClass]=\"iconCLasses\"\n      icon=\"{{ isLoading ? 'refresh' : iconLeft }}\"\n      [size]=\"iconSize\"\n      [noBackground]=\"true\"\n    />\n    <span *ngIf=\"!buttonIcon\"> {{ label }}</span>\n    <icon\n      *ngIf=\"buttonIcon\"\n      [ngClass]=\"iconCLasses\"\n      icon=\"{{ isLoading ? 'refresh' : buttonIcon }}\"\n      [size]=\"iconSize\"\n      [noBackground]=\"true\"\n    />\n    <icon\n      [ngClass]=\"iconCLasses\"\n      *ngIf=\"iconRight && !buttonIcon\"\n      icon=\"{{ isLoading ? 'refresh' : iconRight }}\"\n      [size]=\"iconSize\"\n      [noBackground]=\"true\"\n    />\n  </button>`,\n  styleUrls: ['./button.css'],\n})\nexport class ButtonComponent {\n  /**\n   * Is this the principal call to action on the page?\n   */\n\n  @Input()\n  primary = false;\n\n  /**\n   * What background color to use\n   */\n  @Input()\n  backgroundColor?: string;\n\n  /**\n   * How large should the button be?\n   */\n  @Input()\n  size: 'small' | 'medium' | 'large' = 'medium';\n\n  /**\n   * Button contents\n   *\n   * @required\n   */\n  @Input()\n  label = 'Button';\n\n  /**\n   * Icon Left\n   */\n  @Input()\n  iconLeft = '';\n\n  /**\n   * Icon Left\n   */\n  @Input()\n  iconRight = '';\n\n  /**\n   * ButtonIcon\n   */\n  @Input()\n  buttonIcon = '';\n  /**\n   * FullWidth button\n   */\n  @Input()\n  fullWidth: boolean = false;\n  /**\n   * Loading state\n   */\n  @Input()\n  isLoading: boolean = false;\n\n  /**\n   * Optional click handler\n   */\n  @Output()\n  onClick = new EventEmitter<Event>();\n\n  get iconSize(): 'xs' | 'm' | 'ml' | 'xl' {\n    return this.size === 'small'\n      ? 'm'\n      : this.size === 'medium'\n        ? 'ml'\n        : this.size === 'large'\n          ? 'xl'\n          : 'ml';\n  }\n\n  public get classes(): string[] {\n    const mode = this.primary\n      ? 'storybook-button--primary'\n      : 'storybook-button--secondary';\n\n    const buttonIcon = this.buttonIcon ? 'storybook-button--icon' : '';\n    const fullWith =\n      this.fullWidth && !this.buttonIcon ? 'storybook-button--fullwidth' : '';\n\n    return [\n      'storybook-button',\n      `storybook-button--${this.size}`,\n      mode,\n      buttonIcon,\n      fullWith,\n    ];\n  }\n\n  public get iconCLasses(): string[] {\n    const isLoading = this.isLoading ? 'storybook-button--loading' : '';\n    return [isLoading];\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".storybook-button {\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  font-weight: 700;\n  border: 0;\n  border-radius: 3em;\n  cursor: pointer;\n  display: inline-block;\n  line-height: 1;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  gap: 16px;\n}\n\n.storybook-button--fullwidth {\n  width: 100%;\n}\n\n.storybook-button--loading {\n  animation: rotate 2s 0s both infinite ease-out;\n}\n\n@keyframes rotate {\n  from {\n    transform: rotate(0);\n  }\n  to {\n    transform: rotate(1turn);\n  }\n}\n\n.storybook-button--primary {\n  color: white;\n  background-color: #1ea7fd;\n}\n.storybook-button--secondary {\n  color: #333;\n  background-color: transparent;\n  box-shadow: rgba(0, 0, 0, 0.15) 0px 0px 0px 1px inset;\n}\n.storybook-button--small {\n  font-size: 12px;\n  padding: 10px 16px;\n}\n.storybook-button--medium {\n  font-size: 14px;\n  padding: 11px 20px;\n}\n.storybook-button--large {\n  font-size: 16px;\n  padding: 12px 24px;\n}\n\n.storybook-button--icon {\n  border-radius: 50%;\n}\n\n.storybook-button--icon.storybook-button--small {\n  padding: 10px 10px;\n}\n.storybook-button--icon.storybook-button--medium {\n  padding: 12px 12px;\n}\n.storybook-button--icon.storybook-button--large {\n  padding: 16px 16px;\n}\n",
                    "styleUrl": "./button.css"
                }
            ],
            "stylesData": "",
            "extends": [],
            "accessors": {
                "iconSize": {
                    "name": "iconSize",
                    "getSignature": {
                        "name": "iconSize",
                        "type": "",
                        "returnType": "\"xs\" | \"m\" | \"ml\" | \"xl\"",
                        "line": 102
                    }
                },
                "classes": {
                    "name": "classes",
                    "getSignature": {
                        "name": "classes",
                        "type": "[]",
                        "returnType": "string[]",
                        "line": 112
                    }
                },
                "iconCLasses": {
                    "name": "iconCLasses",
                    "getSignature": {
                        "name": "iconCLasses",
                        "type": "[]",
                        "returnType": "string[]",
                        "line": 130
                    }
                }
            }
        },
        {
            "name": "Card",
            "id": "component-Card-7d3368f8cbd32e7c6b7d457dbdb1225e745aa005b3c5f9d07f1bd25ac40d04ef0ddc7c491da27caaccc10619917b8c37870793cdd10f304aab88344f09ec8424",
            "file": "src/app/component/exemple/adminLTE/card/card.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "card",
            "styleUrls": [],
            "styles": [],
            "template": "<div class=\"card\">      <div class=\"card-header\">\n        <h3 class=\"card-title\">Default Card Example</h3>\n        <div class=\"card-tools\">\n          <!-- Buttons, labels, and many other things can be placed here! -->\n          <!-- Here is a label for example -->\n          <span class=\"badge badge-primary\">Label</span>\n        </div>\n        <!-- /.card-tools -->\n      </div>\n      <!-- /.card-header -->\n      <div class=\"card-body\">The body of the card</div>\n      <!-- /.card-body -->\n      <div class=\"card-footer\">The footer of the card</div>\n      <!-- /.card-footer -->\n    </div>\n    <!-- /.card -->",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\r\nimport { Component, Input } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'card',\r\n  standalone: true,\r\n  imports: [CommonModule],\r\n  template: `<div class=\"card\">\r\n      <div class=\"card-header\">\r\n        <h3 class=\"card-title\">Default Card Example</h3>\r\n        <div class=\"card-tools\">\r\n          <!-- Buttons, labels, and many other things can be placed here! -->\r\n          <!-- Here is a label for example -->\r\n          <span class=\"badge badge-primary\">Label</span>\r\n        </div>\r\n        <!-- /.card-tools -->\r\n      </div>\r\n      <!-- /.card-header -->\r\n      <div class=\"card-body\">The body of the card</div>\r\n      <!-- /.card-body -->\r\n      <div class=\"card-footer\">The footer of the card</div>\r\n      <!-- /.card-footer -->\r\n    </div>\r\n    <!-- /.card -->`,\r\n})\r\nexport class Card {\r\n  public get classes(): string[] {\r\n    return [];\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "accessors": {
                "classes": {
                    "name": "classes",
                    "getSignature": {
                        "name": "classes",
                        "type": "[]",
                        "returnType": "string[]",
                        "line": 27
                    }
                }
            }
        },
        {
            "name": "DashBoardCard",
            "id": "component-DashBoardCard-c09e59f8b983950feb152f5cd72fe570674afca43eed41fc6d12f18317c7ba7e58c978d1fcb58dfd5729eb2896d9bdddd52e8c84ae37058103860af0942eccb7",
            "file": "src/app/component/exemple/dashboard/components/dashboard-card/dashboard-card.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "dashboard-card",
            "styleUrls": [
                "./dashboard-card.scss"
            ],
            "styles": [],
            "template": "<div [ngClass]=\"wrapperclasses\" class=\"wrapper\">   <div class=\"card\">\n     <header class=\"header\">\n       <p>{{ timeInfo.title }}</p>\n       <button class=\"button\">\n         <svg width=\"21\" height=\"5\" xmlns=\"http://www.w3.org/2000/svg\">\n           <path\n             d=\"M2.5 0a2.5 2.5 0 1 1 0 5 2.5 2.5 0 0 1 0-5Zm8 0a2.5 2.5 0 1 1 0 5 2.5 2.5 0 0 1 0-5Zm8 0a2.5 2.5 0 1 1 0 5 2.5 2.5 0 0 1 0-5Z\"\n             fill=\"#BBC0FF\"\n             fill-rule=\"evenodd\"\n           />\n         </svg>\n       </button>\n     </header>\n     <div class=\"content\">\n       <span class=\"hour\">{{\n         timeInfo.timeframes[displayType].current + 'hrs'\n       }}</span>\n       <span class=\"last\">{{\n         'Last week - ' + timeInfo.timeframes[displayType].previous + 'hrs'\n       }}</span>\n     </div>\n   </div>\n </div>",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "displayType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 37,
                    "type": "DisplayType",
                    "decorators": []
                },
                {
                    "name": "timeInfo",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 39,
                    "type": "Time",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\r\nimport { Component, Input } from '@angular/core';\r\nimport type { DisplayType, Time } from '../../interface/time';\r\n\r\n@Component({\r\n  selector: 'dashboard-card',\r\n  standalone: true,\r\n  imports: [CommonModule],\r\n  template: ` <div [ngClass]=\"wrapperclasses\" class=\"wrapper\">\r\n    <div class=\"card\">\r\n      <header class=\"header\">\r\n        <p>{{ timeInfo.title }}</p>\r\n        <button class=\"button\">\r\n          <svg width=\"21\" height=\"5\" xmlns=\"http://www.w3.org/2000/svg\">\r\n            <path\r\n              d=\"M2.5 0a2.5 2.5 0 1 1 0 5 2.5 2.5 0 0 1 0-5Zm8 0a2.5 2.5 0 1 1 0 5 2.5 2.5 0 0 1 0-5Zm8 0a2.5 2.5 0 1 1 0 5 2.5 2.5 0 0 1 0-5Z\"\r\n              fill=\"#BBC0FF\"\r\n              fill-rule=\"evenodd\"\r\n            />\r\n          </svg>\r\n        </button>\r\n      </header>\r\n      <div class=\"content\">\r\n        <span class=\"hour\">{{\r\n          timeInfo.timeframes[displayType].current + 'hrs'\r\n        }}</span>\r\n        <span class=\"last\">{{\r\n          'Last week - ' + timeInfo.timeframes[displayType].previous + 'hrs'\r\n        }}</span>\r\n      </div>\r\n    </div>\r\n  </div>`,\r\n  styleUrls: ['./dashboard-card.scss'],\r\n})\r\nexport class DashBoardCard {\r\n  @Input()\r\n  displayType!: DisplayType;\r\n  @Input()\r\n  timeInfo!: Time;\r\n\r\n  /**\r\n   * Classes\r\n   */\r\n  public get wrapperclasses(): string[] {\r\n    const titleCss = this.timeInfo.title.toLowerCase().replace(' ', '-');\r\n    return [titleCss];\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../assets/styles//abstracts/variables';\r\n@import '../../assets/styles//abstracts/functions';\r\n@import '../../assets/styles/abstracts/mixin';\r\n\r\n$cardColors: (\r\n  work: $lightOrange,\r\n  play: $softBlue,\r\n  study: $lightRed,\r\n  exercise: $limeGreen,\r\n  social: $violet,\r\n  self-care: $softOrange,\r\n);\r\n\r\n@each $style, $value in $cardColors {\r\n  .#{$style} {\r\n    background-color: $value;\r\n    background-image: url('../../assets/img/icon-#{$style}.svg');\r\n    background-position: 94% -8%;\r\n    background-repeat: no-repeat;\r\n  }\r\n}\r\n\r\n.wrapper {\r\n  border-radius: rem(20px);\r\n  padding-block-start: rem(40px);\r\n}\r\n\r\n.card {\r\n  background-color: $darkBlue;\r\n  border-radius: rem(20px);\r\n  padding: rem(20px) rem(20px) rem(30px) rem(20px);\r\n  user-select: none;\r\n  min-width: 200px;\r\n\r\n  &:hover {\r\n    cursor: pointer;\r\n    background-color: lighten($darkBlue, 12%);\r\n  }\r\n\r\n  @include mq('lg') {\r\n    height: calc(100% - rem(48px));\r\n  }\r\n}\r\n\r\n.header {\r\n  @include flex();\r\n}\r\n\r\n.content {\r\n  @include flex();\r\n\r\n  @include mq('lg') {\r\n    flex-direction: column;\r\n    align-items: flex-start;\r\n    gap: rem(10px);\r\n  }\r\n}\r\n\r\n.hour {\r\n  color: #fff;\r\n  @include text-sizes('2xl');\r\n\r\n  @include mq('lg') {\r\n    @include text-sizes('6xl');\r\n  }\r\n}\r\n\r\n.last {\r\n  color: $paleBlue;\r\n  @include text-sizes('lg');\r\n}\r\n\r\n.button {\r\n  background-color: transparent;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  border: none;\r\n  padding: 4px;\r\n\r\n  &:hover {\r\n    cursor: pointer;\r\n  }\r\n\r\n  &:hover path {\r\n    fill: #fff !important;\r\n  }\r\n}\r\n",
                    "styleUrl": "./dashboard-card.scss"
                }
            ],
            "stylesData": "",
            "extends": [],
            "accessors": {
                "wrapperclasses": {
                    "name": "wrapperclasses",
                    "getSignature": {
                        "name": "wrapperclasses",
                        "type": "[]",
                        "returnType": "string[]",
                        "line": 44,
                        "rawdescription": "\n\nClasses\n",
                        "description": "<p>Classes</p>\n"
                    }
                }
            }
        },
        {
            "name": "DashboardLayout",
            "id": "component-DashboardLayout-d9aaa124427b3072f0f394965585e5d791e39b19b6982776394644e24d85cb914bb0e293d7c1ee12f506f6f82f4372c6fb52b020361fd4f62cda89f2c886e26e",
            "file": "src/app/component/exemple/dashboard/layout/dashboard/dashboard.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "dashboard-layout",
            "styleUrls": [],
            "styles": [],
            "template": "<div class=\"dashboard\">   <ng-content></ng-content>\n </div>",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\r\nimport { Component, Input } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'dashboard-layout',\r\n  standalone: true,\r\n  imports: [CommonModule],\r\n  template: ` <div class=\"dashboard\">\r\n    <ng-content></ng-content>\r\n  </div>`,\r\n})\r\nexport class DashboardLayout {}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": []
        },
        {
            "name": "HeaderComponent",
            "id": "component-HeaderComponent-cad94b233ec8e80ceb541e7972c5f9737e08237b4e137112f3987ca48ee0cce5c0d57798d41daa5d4d24d6bdbb2df1606ab68cca2aa0a1785e38f99f3cac0729",
            "file": "src/stories/header.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-header",
            "styleUrls": [
                "./header.css"
            ],
            "styles": [],
            "template": "<header>    <div class=\"storybook-header\">\n      <div>\n        <svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M10 0h12a10 10 0 0110 10v12a10 10 0 01-10 10H10A10 10 0 010 22V10A10 10 0 0110 0z\"\n              fill=\"#FFF\"\n            />\n            <path\n              d=\"M5.3 10.6l10.4 6v11.1l-10.4-6v-11zm11.4-6.2l9.7 5.5-9.7 5.6V4.4z\"\n              fill=\"#555AB9\"\n            />\n            <path\n              d=\"M27.2 10.6v11.2l-10.5 6V16.5l10.5-6zM15.7 4.4v11L6 10l9.7-5.5z\"\n              fill=\"#91BAF8\"\n            />\n          </g>\n        </svg>\n        <h1>Acme</h1>\n      </div>\n      <div>\n        <div *ngIf=\"user\">\n          <span class=\"welcome\">\n            Welcome, <b>{{ user.name }}</b\n            >!\n          </span>\n          <storybook-button\n            *ngIf=\"user\"\n            size=\"small\"\n            (onClick)=\"onLogout.emit($event)\"\n            label=\"Log out\"\n          ></storybook-button>\n        </div>\n        <div *ngIf=\"!user\">\n          <storybook-button\n            *ngIf=\"!user\"\n            size=\"small\"\n            class=\"margin-left\"\n            (onClick)=\"onLogin.emit($event)\"\n            label=\"Log in\"\n          ></storybook-button>\n          <storybook-button\n            *ngIf=\"!user\"\n            size=\"small\"\n            [primary]=\"true\"\n            class=\"margin-left\"\n            (onClick)=\"onCreateAccount.emit($event)\"\n            label=\"Sign up\"\n          ></storybook-button>\n        </div>\n      </div>\n    </div>\n  </header>",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "user",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 69,
                    "type": "User | null",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onCreateAccount",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 78,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogin",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 72,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogout",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 75,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "ButtonComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { ButtonComponent } from './button.component';\nimport type { User } from './user';\n\n@Component({\n  selector: 'storybook-header',\n  standalone: true,\n  imports: [CommonModule, ButtonComponent],\n  template: `<header>\n    <div class=\"storybook-header\">\n      <div>\n        <svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M10 0h12a10 10 0 0110 10v12a10 10 0 01-10 10H10A10 10 0 010 22V10A10 10 0 0110 0z\"\n              fill=\"#FFF\"\n            />\n            <path\n              d=\"M5.3 10.6l10.4 6v11.1l-10.4-6v-11zm11.4-6.2l9.7 5.5-9.7 5.6V4.4z\"\n              fill=\"#555AB9\"\n            />\n            <path\n              d=\"M27.2 10.6v11.2l-10.5 6V16.5l10.5-6zM15.7 4.4v11L6 10l9.7-5.5z\"\n              fill=\"#91BAF8\"\n            />\n          </g>\n        </svg>\n        <h1>Acme</h1>\n      </div>\n      <div>\n        <div *ngIf=\"user\">\n          <span class=\"welcome\">\n            Welcome, <b>{{ user.name }}</b\n            >!\n          </span>\n          <storybook-button\n            *ngIf=\"user\"\n            size=\"small\"\n            (onClick)=\"onLogout.emit($event)\"\n            label=\"Log out\"\n          ></storybook-button>\n        </div>\n        <div *ngIf=\"!user\">\n          <storybook-button\n            *ngIf=\"!user\"\n            size=\"small\"\n            class=\"margin-left\"\n            (onClick)=\"onLogin.emit($event)\"\n            label=\"Log in\"\n          ></storybook-button>\n          <storybook-button\n            *ngIf=\"!user\"\n            size=\"small\"\n            [primary]=\"true\"\n            class=\"margin-left\"\n            (onClick)=\"onCreateAccount.emit($event)\"\n            label=\"Sign up\"\n          ></storybook-button>\n        </div>\n      </div>\n    </div>\n  </header>`,\n  styleUrls: ['./header.css'],\n})\nexport class HeaderComponent {\n  @Input()\n  user: User | null = null;\n\n  @Output()\n  onLogin = new EventEmitter<Event>();\n\n  @Output()\n  onLogout = new EventEmitter<Event>();\n\n  @Output()\n  onCreateAccount = new EventEmitter<Event>();\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".storybook-header {\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  border-bottom: 1px solid rgba(0, 0, 0, 0.1);\n  padding: 15px 20px;\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n}\n\n.storybook-header svg {\n  display: inline-block;\n  vertical-align: top;\n}\n\n.storybook-header h1 {\n  font-weight: 700;\n  font-size: 20px;\n  line-height: 1;\n  margin: 6px 0 6px 10px;\n  display: inline-block;\n  vertical-align: top;\n}\n\n.storybook-header button + button {\n  margin-left: 10px;\n}\n\n.storybook-header .welcome {\n  color: #333;\n  font-size: 14px;\n  margin-right: 10px;\n}\n",
                    "styleUrl": "./header.css"
                }
            ],
            "stylesData": "",
            "extends": []
        },
        {
            "name": "Icon",
            "id": "component-Icon-0dea64b4ded01f3105806fa264f0d18a8923413392a3448384c76f323b51bb3452c95a293d7b5a1c1773aa0b05d1d1fd183d4affbfbfe65595392a2b8dec9659",
            "file": "src/app/component/exemple/materialUI/icon/icon.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "icon",
            "styleUrls": [],
            "styles": [],
            "template": "<div [ngClass]=\"classes\" class=\"icon\">\n  <mat-icon\n    aria-hidden=\"false\"\n    aria-label=\"Icon\"\n    fontIcon=\"{{ icon }}\"\n  ></mat-icon>\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "icon",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 28,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "noBackground",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 27,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "size",
                    "defaultValue": "'m'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 26,
                    "type": "\"xs\" | \"m\" | \"ml\" | \"xl\"",
                    "decorators": []
                },
                {
                    "name": "variant",
                    "defaultValue": "'primary'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 25,
                    "type": "\"primary\" | \"danger\" | \"warn\" | \"success\"",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "MatIconModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\r\nimport { ChangeDetectionStrategy, Component, Input } from '@angular/core';\r\nimport { MatIconModule } from '@angular/material/icon';\r\n\r\n/**\r\n * @title Basic icons\r\n */\r\n@Component({\r\n  selector: 'icon',\r\n  template: `\r\n    <div [ngClass]=\"classes\" class=\"icon\">\r\n      <mat-icon\r\n        aria-hidden=\"false\"\r\n        aria-label=\"Icon\"\r\n        fontIcon=\"{{ icon }}\"\r\n      ></mat-icon>\r\n    </div>\r\n  `,\r\n  styleUrl: './icon.scss',\r\n  standalone: true,\r\n  imports: [CommonModule, MatIconModule],\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class Icon {\r\n  @Input() variant: 'primary' | 'danger' | 'warn' | 'success' = 'primary';\r\n  @Input() size: 'xs' | 'm' | 'ml' | 'xl' = 'm';\r\n  @Input() noBackground: boolean = false;\r\n  @Input() icon: string = '';\r\n  /**\r\n   * Classes\r\n   */\r\n\r\n  public get variantClasses(): string[] {\r\n    const variantClass = 'icon-' + this.variant;\r\n    const noBackground = this.noBackground ? 'icon-transparent' : '';\r\n    return [variantClass, noBackground];\r\n  }\r\n  public get sizeClasses(): string[] {\r\n    let sizeClass = 'icon-' + this.size;\r\n\r\n    return [sizeClass];\r\n  }\r\n\r\n  public get classes(): string[] {\r\n    return [...this.variantClasses, ...this.sizeClasses];\r\n  }\r\n}\r\n",
            "styleUrl": "./icon.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "accessors": {
                "variantClasses": {
                    "name": "variantClasses",
                    "getSignature": {
                        "name": "variantClasses",
                        "type": "[]",
                        "returnType": "string[]",
                        "line": 33,
                        "rawdescription": "\n\nClasses\n",
                        "description": "<p>Classes</p>\n"
                    }
                },
                "sizeClasses": {
                    "name": "sizeClasses",
                    "getSignature": {
                        "name": "sizeClasses",
                        "type": "[]",
                        "returnType": "string[]",
                        "line": 38
                    }
                },
                "classes": {
                    "name": "classes",
                    "getSignature": {
                        "name": "classes",
                        "type": "[]",
                        "returnType": "string[]",
                        "line": 44
                    }
                }
            }
        },
        {
            "name": "InputText",
            "id": "component-InputText-0b89d5a8546c30cda7b09c74fab63adb45037a84637a80b37e2b052240fb52a4828f9d4ad8313a7c7f647f3111fd22fa18b463d438c5b80159d9de0b105bbf3e",
            "file": "src/app/component/exemple/form/inputText/inputText.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "input-text",
            "styleUrls": [
                "./input-text.scss"
            ],
            "styles": [],
            "template": "<div class=\"field\" [ngClass]=\"classes\">    <label *ngIf=\"label\">{{ label }}</label>\n    <input #inputElement />\n    <p *ngIf=\"error\">{{ errorMessage }}</p>\n  </div>",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "disabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 27,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "error",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 31,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "errorMessage",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 32,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 30,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "placeholder",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 25,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "type",
                    "defaultValue": "'text'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 24,
                    "type": "\"text\" | \"email\"",
                    "decorators": []
                },
                {
                    "name": "value",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 26,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 55,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnChange",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 47,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 39,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\r\nimport {\r\n  Component,\r\n  Input,\r\n  ElementRef,\r\n  Renderer2,\r\n  OnInit,\r\n  AfterViewInit,\r\n} from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'input-text',\r\n  standalone: true,\r\n  imports: [CommonModule],\r\n  template: `<div class=\"field\" [ngClass]=\"classes\">\r\n    <label *ngIf=\"label\">{{ label }}</label>\r\n    <input #inputElement />\r\n    <p *ngIf=\"error\">{{ errorMessage }}</p>\r\n  </div>`,\r\n  styleUrls: ['./input-text.scss'],\r\n})\r\nexport class InputText implements OnInit, AfterViewInit {\r\n  // input attribute\r\n  @Input() type: 'text' | 'email' = 'text';\r\n  @Input() placeholder: string = '';\r\n  @Input() value: string = '';\r\n  @Input() disabled: boolean = false;\r\n\r\n  // additional props\r\n  @Input() label?: string;\r\n  @Input() error?: boolean = false;\r\n  @Input() errorMessage?: string;\r\n\r\n  constructor(\r\n    private el: ElementRef,\r\n    private renderer: Renderer2\r\n  ) {}\r\n\r\n  ngOnInit() {\r\n    const input = this.el.nativeElement.querySelector('input');\r\n    this.renderer.setAttribute(input, 'type', this.type);\r\n    this.renderer.setAttribute(input, 'placeholder', this.placeholder);\r\n    this.renderer.setProperty(input, 'value', this.value);\r\n    this.renderer.setProperty(input, 'disabled', this.disabled);\r\n  }\r\n\r\n  ngOnChange() {\r\n    const input = this.el.nativeElement.querySelector('input');\r\n    this.renderer.setAttribute(input, 'type', this.type);\r\n    this.renderer.setAttribute(input, 'placeholder', this.placeholder);\r\n    this.renderer.setProperty(input, 'value', this.value);\r\n    this.renderer.setProperty(input, 'disabled', this.disabled);\r\n  }\r\n\r\n  ngAfterViewInit() {\r\n    const input = this.el.nativeElement.querySelector('input');\r\n    for (const key in this.el.nativeElement.attributes) {\r\n      if (this.el.nativeElement.attributes.hasOwnProperty(key)) {\r\n        const attr = this.el.nativeElement.attributes[key];\r\n        this.renderer.setAttribute(input, attr.name, attr.value);\r\n      }\r\n    }\r\n  }\r\n\r\n  public get classes(): string[] {\r\n    const errorClass = this.error ? 'error' : '';\r\n    return [errorClass];\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".field {\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: start;\r\n\r\n  input {\r\n    height: 40px;\r\n    width: 200px;\r\n    padding-left: 10px;\r\n    border-radius: 8px;\r\n    outline: none;\r\n    border: 1px solid #333;\r\n  }\r\n\r\n  &.error {\r\n    input {\r\n      border-color: rgb(170, 81, 81);\r\n    }\r\n  }\r\n\r\n  label {\r\n    font-size: 0.9rem;\r\n  }\r\n\r\n  p {\r\n    font-size: 0.9rem;\r\n    margin: 2px;\r\n    color: rgb(170, 81, 81);\r\n  }\r\n}\r\n",
                    "styleUrl": "./input-text.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "el",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "renderer",
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 32,
                "jsdoctags": [
                    {
                        "name": "el",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "renderer",
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit",
                "AfterViewInit"
            ],
            "accessors": {
                "classes": {
                    "name": "classes",
                    "getSignature": {
                        "name": "classes",
                        "type": "[]",
                        "returnType": "string[]",
                        "line": 65
                    }
                }
            }
        },
        {
            "name": "PageComponent",
            "id": "component-PageComponent-d32b0f19628254ea3fc5526c4d4564ada1cc83cf936759006d90a46f5874b02a3359e331bddda20b22e74a616a6443c660602ba74dd38ebe1160759e0de6f7ba",
            "file": "src/stories/page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-page",
            "styleUrls": [
                "./page.css"
            ],
            "styles": [],
            "template": "<article>    <storybook-header\n      [user]=\"user\"\n      (onLogout)=\"doLogout()\"\n      (onLogin)=\"doLogin()\"\n      (onCreateAccount)=\"doCreateAccount()\"\n    ></storybook-header>\n    <section class=\"storybook-page\">\n      <h2>Pages in Storybook</h2>\n      <p>\n        We recommend building UIs with a\n        <a href=\"https://componentdriven.org\" target=\"_blank\" rel=\"noopener noreferrer\">\n          <strong>component-driven</strong>\n        </a>\n        process starting with atomic components and ending with pages.\n      </p>\n      <p>\n        Render pages with mock data. This makes it easy to build and review page states without\n        needing to navigate to them in your app. Here are some handy patterns for managing page data\n        in Storybook:\n      </p>\n      <ul>\n        <li>\n          Use a higher-level connected component. Storybook helps you compose such data from the\n          \"args\" of child component stories\n        </li>\n        <li>\n          Assemble data in the page component from your services. You can mock these services out\n          using Storybook.\n        </li>\n      </ul>\n      <p>\n        Get a guided tutorial on component-driven development at\n        <a href=\"https://storybook.js.org/tutorials/\" target=\"_blank\" rel=\"noopener noreferrer\">\n          Storybook tutorials\n        </a>\n        . Read more in the\n        <a href=\"https://storybook.js.org/docs\" target=\"_blank\" rel=\"noopener noreferrer\"> docs </a>\n        .\n      </p>\n      <div class=\"tip-wrapper\">\n        <span class=\"tip\">Tip</span> Adjust the width of the canvas with the\n        <svg width=\"10\" height=\"10\" viewBox=\"0 0 12 12\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M1.5 5.2h4.8c.3 0 .5.2.5.4v5.1c-.1.2-.3.3-.4.3H1.4a.5.5 0 01-.5-.4V5.7c0-.3.2-.5.5-.5zm0-2.1h6.9c.3 0 .5.2.5.4v7a.5.5 0 01-1 0V4H1.5a.5.5 0 010-1zm0-2.1h9c.3 0 .5.2.5.4v9.1a.5.5 0 01-1 0V2H1.5a.5.5 0 010-1zm4.3 5.2H2V10h3.8V6.2z\"\n              id=\"a\"\n              fill=\"#999\"\n            />\n          </g>\n        </svg>\n        Viewports addon in the toolbar\n      </div>\n    </section>\n  </article>",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "user",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "User | null",
                    "optional": false,
                    "description": "",
                    "line": 69
                }
            ],
            "methodsClass": [
                {
                    "name": "doCreateAccount",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 79,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "doLogin",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 75,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "doLogout",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 71,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "HeaderComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { HeaderComponent } from './header.component';\nimport type { User } from './user';\n\n@Component({\n  selector: 'storybook-page',\n  standalone: true,\n  imports: [CommonModule, HeaderComponent],\n  template: `<article>\n    <storybook-header\n      [user]=\"user\"\n      (onLogout)=\"doLogout()\"\n      (onLogin)=\"doLogin()\"\n      (onCreateAccount)=\"doCreateAccount()\"\n    ></storybook-header>\n    <section class=\"storybook-page\">\n      <h2>Pages in Storybook</h2>\n      <p>\n        We recommend building UIs with a\n        <a href=\"https://componentdriven.org\" target=\"_blank\" rel=\"noopener noreferrer\">\n          <strong>component-driven</strong>\n        </a>\n        process starting with atomic components and ending with pages.\n      </p>\n      <p>\n        Render pages with mock data. This makes it easy to build and review page states without\n        needing to navigate to them in your app. Here are some handy patterns for managing page data\n        in Storybook:\n      </p>\n      <ul>\n        <li>\n          Use a higher-level connected component. Storybook helps you compose such data from the\n          \"args\" of child component stories\n        </li>\n        <li>\n          Assemble data in the page component from your services. You can mock these services out\n          using Storybook.\n        </li>\n      </ul>\n      <p>\n        Get a guided tutorial on component-driven development at\n        <a href=\"https://storybook.js.org/tutorials/\" target=\"_blank\" rel=\"noopener noreferrer\">\n          Storybook tutorials\n        </a>\n        . Read more in the\n        <a href=\"https://storybook.js.org/docs\" target=\"_blank\" rel=\"noopener noreferrer\"> docs </a>\n        .\n      </p>\n      <div class=\"tip-wrapper\">\n        <span class=\"tip\">Tip</span> Adjust the width of the canvas with the\n        <svg width=\"10\" height=\"10\" viewBox=\"0 0 12 12\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M1.5 5.2h4.8c.3 0 .5.2.5.4v5.1c-.1.2-.3.3-.4.3H1.4a.5.5 0 01-.5-.4V5.7c0-.3.2-.5.5-.5zm0-2.1h6.9c.3 0 .5.2.5.4v7a.5.5 0 01-1 0V4H1.5a.5.5 0 010-1zm0-2.1h9c.3 0 .5.2.5.4v9.1a.5.5 0 01-1 0V2H1.5a.5.5 0 010-1zm4.3 5.2H2V10h3.8V6.2z\"\n              id=\"a\"\n              fill=\"#999\"\n            />\n          </g>\n        </svg>\n        Viewports addon in the toolbar\n      </div>\n    </section>\n  </article>`,\n  styleUrls: ['./page.css'],\n})\nexport class PageComponent {\n  user: User | null = null;\n\n  doLogout() {\n    this.user = null;\n  }\n\n  doLogin() {\n    this.user = { name: 'Jane Doe' };\n  }\n\n  doCreateAccount() {\n    this.user = { name: 'Jane Doe' };\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".storybook-page {\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  font-size: 14px;\n  line-height: 24px;\n  padding: 48px 20px;\n  margin: 0 auto;\n  max-width: 600px;\n  color: #333;\n}\n\n.storybook-page h2 {\n  font-weight: 700;\n  font-size: 32px;\n  line-height: 1;\n  margin: 0 0 4px;\n  display: inline-block;\n  vertical-align: top;\n}\n\n.storybook-page p {\n  margin: 1em 0;\n}\n\n.storybook-page a {\n  text-decoration: none;\n  color: #1ea7fd;\n}\n\n.storybook-page ul {\n  padding-left: 30px;\n  margin: 1em 0;\n}\n\n.storybook-page li {\n  margin-bottom: 8px;\n}\n\n.storybook-page .tip {\n  display: inline-block;\n  border-radius: 1em;\n  font-size: 11px;\n  line-height: 12px;\n  font-weight: 700;\n  background: #e7fdd8;\n  color: #66bf3c;\n  padding: 4px 12px;\n  margin-right: 10px;\n  vertical-align: top;\n}\n\n.storybook-page .tip-wrapper {\n  font-size: 13px;\n  line-height: 20px;\n  margin-top: 40px;\n  margin-bottom: 40px;\n}\n\n.storybook-page .tip-wrapper svg {\n  display: inline-block;\n  height: 12px;\n  width: 12px;\n  margin-right: 4px;\n  vertical-align: top;\n  margin-top: 3px;\n}\n\n.storybook-page .tip-wrapper svg path {\n  fill: #1ea7fd;\n}\n",
                    "styleUrl": "./page.css"
                }
            ],
            "stylesData": "",
            "extends": []
        },
        {
            "name": "ProgressionCard",
            "id": "component-ProgressionCard-d317f7c6be1c1c78ced4d188c520af4773b158eb24c501820e4981c83da73048f6215efdd0f95b53c9a07c16d177725c0fc2f662f353e2b957ce713ddfe93eab",
            "file": "src/app/component/exemple/materialUI/progressionCard/progressionCard.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "progression-card",
            "styleUrls": [
                "./progession.scss"
            ],
            "styles": [],
            "template": "<div [ngClass]=\"classes\" class=\"card\">    <div>\n      <typo text=\"{{ title }}\" size=\"ml\" fontWeight=\"bold\" />\n      <div class=\"info\">\n        <typo text=\"{{ result }}\" size=\"xl\" />\n        <div>\n          <div class=\"progression\">\n            <icon\n              size=\"xs\"\n              icon=\"{{ getIcon }}\"\n              variant=\"{{ progressionClass }}\"\n            />\n            <typo\n              [text]=\"progression + '%'\"\n              size=\"xs\"\n              variant=\"{{ progressionClass }}\"\n            />\n\n            <typo\n              *ngIf=\"!!infoSup\"\n              text=\"{{ infoSup }}\"\n              size=\"xs\"\n              variant=\"{{ progressionClass }}\"\n            />\n          </div>\n          <div class=\"result-ca\">\n            <typo\n              *ngIf=\"!!resultCA\"\n              class=\"bold-weight\"\n              [text]=\"resultCA + '€'\"\n              variant=\"{{ progressionClass }}\"\n              fontWeight=\"bold\"\n            />\n          </div>\n        </div>\n      </div>\n      <typo text=\"Par rapport à la période précédente\" size=\"xs\" />\n    </div>\n    <div [ngClass]=\"graphiqueBackground\">Graphique</div>\n  </div>",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "infoSup",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 57,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "lastProgression",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 56,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "progression",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 55,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "result",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 54,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "resultCA",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 58,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "title",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 53,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "Typo"
                },
                {
                    "name": "Icon"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\r\nimport { Component, Input } from '@angular/core';\r\nimport { Typo } from '../typo/typo';\r\nimport { Icon } from '../icon/icon';\r\n\r\n@Component({\r\n  selector: 'progression-card',\r\n  standalone: true,\r\n  imports: [CommonModule, Typo, Icon],\r\n  template: `<div [ngClass]=\"classes\" class=\"card\">\r\n    <div>\r\n      <typo text=\"{{ title }}\" size=\"ml\" fontWeight=\"bold\" />\r\n      <div class=\"info\">\r\n        <typo text=\"{{ result }}\" size=\"xl\" />\r\n        <div>\r\n          <div class=\"progression\">\r\n            <icon\r\n              size=\"xs\"\r\n              icon=\"{{ getIcon }}\"\r\n              variant=\"{{ progressionClass }}\"\r\n            />\r\n            <typo\r\n              [text]=\"progression + '%'\"\r\n              size=\"xs\"\r\n              variant=\"{{ progressionClass }}\"\r\n            />\r\n\r\n            <typo\r\n              *ngIf=\"!!infoSup\"\r\n              text=\"{{ infoSup }}\"\r\n              size=\"xs\"\r\n              variant=\"{{ progressionClass }}\"\r\n            />\r\n          </div>\r\n          <div class=\"result-ca\">\r\n            <typo\r\n              *ngIf=\"!!resultCA\"\r\n              class=\"bold-weight\"\r\n              [text]=\"resultCA + '€'\"\r\n              variant=\"{{ progressionClass }}\"\r\n              fontWeight=\"bold\"\r\n            />\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <typo text=\"Par rapport à la période précédente\" size=\"xs\" />\r\n    </div>\r\n    <div [ngClass]=\"graphiqueBackground\">Graphique</div>\r\n  </div>`,\r\n  styleUrls: ['./progession.scss'],\r\n})\r\nexport class ProgressionCard {\r\n  @Input() title: string = ''; // On peu aussi définir à l'avance quel sont les titres acceptés si on les connais à l'avance\r\n  @Input() result!: number;\r\n  @Input() progression!: number;\r\n  @Input() lastProgression!: number;\r\n  @Input() infoSup?: string;\r\n  @Input() resultCA?: number;\r\n\r\n  get progressionClass(): string {\r\n    let classInfoProgression;\r\n    const progression = this.progression - this.lastProgression;\r\n\r\n    if (progression > 0) {\r\n      classInfoProgression = 'success';\r\n    } else if (progression < 1 && progression > -5) {\r\n      classInfoProgression = 'warn';\r\n    } else {\r\n      classInfoProgression = 'danger';\r\n    }\r\n\r\n    return classInfoProgression;\r\n  }\r\n\r\n  get getIcon(): string {\r\n    let icon = '';\r\n    const progression = this.progression - this.lastProgression;\r\n\r\n    if (progression < 0) {\r\n      icon = 'arrow_downward';\r\n    } else if (progression === 0) {\r\n      icon = 'arrow_forward';\r\n    } else {\r\n      icon = 'arrow_upward';\r\n    }\r\n    console.log(icon);\r\n    return icon;\r\n  }\r\n\r\n  get graphiqueBackground() {\r\n    return 'bg-' + this.progressionClass;\r\n  }\r\n\r\n  get iconStyle(): string[] {\r\n    return [];\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../../../styles.scss';\r\n\r\n.card {\r\n  border: 1px solid $primary-light;\r\n  display: flex;\r\n  gap: 10px;\r\n  padding: 10px;\r\n  background-color: #fff;\r\n\r\n  > div:first-child {\r\n    flex-grow: 2;\r\n\r\n    .info {\r\n      display: flex;\r\n      gap: 8px;\r\n      > div {\r\n        align-self: center;\r\n        .progression {\r\n          display: flex;\r\n          align-items: center;\r\n          gap: 6px;\r\n        }\r\n        .result {\r\n          text-align: center;\r\n          font-weight: bold !important;\r\n        }\r\n      }\r\n      .result-ca {\r\n        text-align: center;\r\n      }\r\n    }\r\n  }\r\n\r\n  > div:last-child {\r\n    flex-grow: 1;\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n  }\r\n}\r\n",
                    "styleUrl": "./progession.scss"
                }
            ],
            "stylesData": "",
            "extends": [],
            "accessors": {
                "progressionClass": {
                    "name": "progressionClass",
                    "getSignature": {
                        "name": "progressionClass",
                        "type": "string",
                        "returnType": "string",
                        "line": 60
                    }
                },
                "getIcon": {
                    "name": "getIcon",
                    "getSignature": {
                        "name": "getIcon",
                        "type": "string",
                        "returnType": "string",
                        "line": 75
                    }
                },
                "graphiqueBackground": {
                    "name": "graphiqueBackground",
                    "getSignature": {
                        "name": "graphiqueBackground",
                        "type": "",
                        "returnType": "",
                        "line": 90
                    }
                },
                "iconStyle": {
                    "name": "iconStyle",
                    "getSignature": {
                        "name": "iconStyle",
                        "type": "[]",
                        "returnType": "string[]",
                        "line": 94
                    }
                }
            }
        },
        {
            "name": "Typo",
            "id": "component-Typo-292e48f7059f3cfcc07c631e60763802794e88166403f24574ee98891ac60fec3c8cf16bd1b3dc460cfc28ceb7df1f865fd83d7686c37b5d9f92377d8dedcecc",
            "file": "src/app/component/exemple/materialUI/typo/typo.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "typo",
            "styleUrls": [],
            "styles": [],
            "template": "<p [ngClass]=\"classes\" [ngStyle]=\"fontWeightStyle\">    {{ text }} <ng-content *ng-if=\"!text\"></ng-content>\n  </p>",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "fontWeight",
                    "defaultValue": "'regular'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 22,
                    "type": "\"regular\" | \"medium\" | \"bold\"",
                    "decorators": []
                },
                {
                    "name": "size",
                    "defaultValue": "'m'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 21,
                    "type": "\"xs\" | \"m\" | \"ml\" | \"xl\"",
                    "decorators": []
                },
                {
                    "name": "text",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 23,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "variant",
                    "defaultValue": "'primary'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13,
                    "type": "\"primary\" | \"danger\" | \"danger-accent\" | \"warn-accent\" | \"warn\" | \"success\" | \"success-accent\"",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "Typo"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\r\nimport { Component, Input } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'typo',\r\n  standalone: true,\r\n  imports: [CommonModule, Typo],\r\n  template: `<p [ngClass]=\"classes\" [ngStyle]=\"fontWeightStyle\">\r\n    {{ text }} <ng-content *ng-if=\"!text\"></ng-content>\r\n  </p>`,\r\n})\r\nexport class Typo {\r\n  @Input() variant:\r\n    | 'primary'\r\n    | 'danger'\r\n    | 'danger-accent'\r\n    | 'warn-accent'\r\n    | 'warn'\r\n    | 'success'\r\n    | 'success-accent' = 'primary';\r\n  @Input() size: 'xs' | 'm' | 'ml' | 'xl' = 'm';\r\n  @Input() fontWeight: 'regular' | 'medium' | 'bold' = 'regular';\r\n  @Input() text: string = '';\r\n  /**\r\n   * Classes\r\n   */\r\n\r\n  public get variantClasses(): string[] {\r\n    const variantClass = 'text-' + this.variant;\r\n    return [variantClass];\r\n  }\r\n  public get sizeClasses(): string[] {\r\n    let sizeClass = '';\r\n    switch (this.size) {\r\n      case 'xs':\r\n        {\r\n          sizeClass = 'mat-body-small';\r\n        }\r\n        break;\r\n      case 'm':\r\n        {\r\n          sizeClass = 'mat-body-medium';\r\n        }\r\n        break;\r\n      case 'ml':\r\n        {\r\n          sizeClass = 'mat-body-large';\r\n        }\r\n        break;\r\n\r\n      case 'xl':\r\n        {\r\n          sizeClass = 'mat-display-small';\r\n        }\r\n        break;\r\n    }\r\n    return [sizeClass];\r\n  }\r\n\r\n  get fontWeightStyle() {\r\n    let fontWeight = '';\r\n\r\n    switch (this.fontWeight) {\r\n      case 'bold': {\r\n        fontWeight = '700';\r\n        break;\r\n      }\r\n      case 'medium': {\r\n        fontWeight = '500';\r\n        break;\r\n      }\r\n      case 'regular': {\r\n        fontWeight = '400';\r\n        break;\r\n      }\r\n    }\r\n    console.log(fontWeight);\r\n    return { fontWeight };\r\n  }\r\n\r\n  public get classes(): string[] {\r\n    return [...this.variantClasses, ...this.sizeClasses];\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "accessors": {
                "variantClasses": {
                    "name": "variantClasses",
                    "getSignature": {
                        "name": "variantClasses",
                        "type": "[]",
                        "returnType": "string[]",
                        "line": 28,
                        "rawdescription": "\n\nClasses\n",
                        "description": "<p>Classes</p>\n"
                    }
                },
                "sizeClasses": {
                    "name": "sizeClasses",
                    "getSignature": {
                        "name": "sizeClasses",
                        "type": "[]",
                        "returnType": "string[]",
                        "line": 32
                    }
                },
                "fontWeightStyle": {
                    "name": "fontWeightStyle",
                    "getSignature": {
                        "name": "fontWeightStyle",
                        "type": "",
                        "returnType": "",
                        "line": 60
                    }
                },
                "classes": {
                    "name": "classes",
                    "getSignature": {
                        "name": "classes",
                        "type": "[]",
                        "returnType": "string[]",
                        "line": 81
                    }
                }
            }
        },
        {
            "name": "UserCard",
            "id": "component-UserCard-b86674de7bcaaeb3b002bef674bcc4e9f5fd95c356440b62ad90ecf4616d85cb92bc86c04478df46b897b5526986ce835fbe442a629bcb8d25d112e0de8b8c5f",
            "file": "src/app/component/exemple/dashboard/components/user-card/user-card.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "user-card",
            "styleUrls": [
                "./user-card.scss"
            ],
            "styles": [],
            "template": "<div class=\"userCard\">    <div class=\"user\">\n      <div class=\"userImage\">\n        <img\n          src=\"https://api.dicebear.com/9.x/adventurer-neutral/svg?seed=Oliver\"\n          alt=\"{{ user.firstName }}\"\n        />\n      </div>\n      <div class=\"flex flex-column items-start gap-2\">\n        <span class=\"text-pale text-sm\">Report for</span>\n        <span class=\"name\">\n          <span>{{ user.firstName }} </span> <span>{{ user.lastName }}</span>\n        </span>\n      </div>\n    </div>\n    <div class=\"buttonsGroup\">\n      <button\n        type=\"button\"\n        (click)=\"changeDisplayType('daily')\"\n        [ngClass]=\"btnDaily\"\n      >\n        Daily\n      </button>\n      <button\n        type=\"button\"\n        (click)=\"changeDisplayType('weekly')\"\n        [ngClass]=\"btnWeekly\"\n      >\n        Weekly\n      </button>\n      <button\n        type=\"button\"\n        (click)=\"changeDisplayType('monthly')\"\n        [ngClass]=\"btnMontly\"\n      >\n        Monthly\n      </button>\n    </div>\n  </div>",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "displayType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 55,
                    "type": "DisplayType",
                    "decorators": []
                },
                {
                    "name": "user",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 52,
                    "type": "User",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onClick",
                    "defaultValue": "new EventEmitter<DisplayType>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 58,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "changeDisplayType",
                    "args": [
                        {
                            "name": "displayType",
                            "type": "DisplayType",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 60,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "displayType",
                            "type": "DisplayType",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\r\nimport { Component, Input, Output, EventEmitter } from '@angular/core';\r\nimport type { DisplayType, User } from '../../interface/time';\r\n\r\n@Component({\r\n  selector: 'user-card',\r\n  standalone: true,\r\n  imports: [CommonModule],\r\n  template: `<div class=\"userCard\">\r\n    <div class=\"user\">\r\n      <div class=\"userImage\">\r\n        <img\r\n          src=\"https://api.dicebear.com/9.x/adventurer-neutral/svg?seed=Oliver\"\r\n          alt=\"{{ user.firstName }}\"\r\n        />\r\n      </div>\r\n      <div class=\"flex flex-column items-start gap-2\">\r\n        <span class=\"text-pale text-sm\">Report for</span>\r\n        <span class=\"name\">\r\n          <span>{{ user.firstName }} </span> <span>{{ user.lastName }}</span>\r\n        </span>\r\n      </div>\r\n    </div>\r\n    <div class=\"buttonsGroup\">\r\n      <button\r\n        type=\"button\"\r\n        (click)=\"changeDisplayType('daily')\"\r\n        [ngClass]=\"btnDaily\"\r\n      >\r\n        Daily\r\n      </button>\r\n      <button\r\n        type=\"button\"\r\n        (click)=\"changeDisplayType('weekly')\"\r\n        [ngClass]=\"btnWeekly\"\r\n      >\r\n        Weekly\r\n      </button>\r\n      <button\r\n        type=\"button\"\r\n        (click)=\"changeDisplayType('monthly')\"\r\n        [ngClass]=\"btnMontly\"\r\n      >\r\n        Monthly\r\n      </button>\r\n    </div>\r\n  </div>`,\r\n  styleUrls: ['./user-card.scss'],\r\n})\r\nexport class UserCard {\r\n  @Input()\r\n  user!: User;\r\n\r\n  @Input()\r\n  displayType!: DisplayType;\r\n\r\n  @Output()\r\n  onClick = new EventEmitter<DisplayType>();\r\n\r\n  changeDisplayType(displayType: DisplayType) {\r\n    this.onClick.emit(displayType);\r\n  }\r\n\r\n  /**\r\n   * Classes\r\n   */\r\n  public get btnDaily(): string[] {\r\n    const textColor = this.displayType === 'daily' ? 'text-white' : 'text-pale';\r\n    return [textColor];\r\n  }\r\n  public get btnWeekly(): string[] {\r\n    const textColor =\r\n      this.displayType === 'weekly' ? 'text-white' : 'text-pale';\r\n    return [textColor];\r\n  }\r\n  public get btnMontly(): string[] {\r\n    const textColor =\r\n      this.displayType === 'monthly' ? 'text-white' : 'text-pale';\r\n    return [textColor];\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../assets/styles//abstracts/variables';\r\n@import '../../assets/styles//abstracts/functions';\r\n@import '../../assets/styles/abstracts/mixin';\r\n\r\n.userCard {\r\n  background-color: $darkBlue;\r\n  border-radius: rem(20px);\r\n  user-select: none;\r\n}\r\n\r\n.user {\r\n  @include flex(start, center, no-wrap, 16px, 16px);\r\n  background-color: $blue;\r\n  border-radius: rem(20px);\r\n  padding: rem(24px);\r\n\r\n  @include mq('lg') {\r\n    flex-direction: column;\r\n    align-items: start;\r\n    height: 300px;\r\n  }\r\n}\r\n\r\n.name {\r\n  color: #fff;\r\n  @include text-sizes('xl');\r\n\r\n  @include mq('lg') {\r\n    @include text-sizes('5xl');\r\n    display: flex;\r\n    flex-direction: column;\r\n    gap: rem(10px);\r\n  }\r\n}\r\n\r\n.userImage {\r\n  width: 80px;\r\n  height: 80px;\r\n  border-radius: 50%;\r\n  border: 2px solid #fff;\r\n  flex-shrink: 0;\r\n  overflow: hidden;\r\n\r\n  @include mq('lg') {\r\n    margin-block-end: 35px;\r\n  }\r\n}\r\n\r\n.userImage img {\r\n  max-width: 100%;\r\n  object-fit: cover;\r\n  object-position: center;\r\n}\r\n\r\n.buttonsGroup {\r\n  padding: rem(24px);\r\n  @include flex(space-around);\r\n\r\n  @include mq('lg') {\r\n    flex-direction: column;\r\n    align-items: start;\r\n    gap: 20px;\r\n  }\r\n}\r\n\r\n.buttonsGroup button {\r\n  background-color: transparent;\r\n  border: none;\r\n  font-weight: 500;\r\n  @include Rubik();\r\n  @include text-sizes('base');\r\n\r\n  &:hover {\r\n    cursor: pointer;\r\n    color: #fff;\r\n  }\r\n}\r\n",
                    "styleUrl": "./user-card.scss"
                }
            ],
            "stylesData": "",
            "extends": [],
            "accessors": {
                "btnDaily": {
                    "name": "btnDaily",
                    "getSignature": {
                        "name": "btnDaily",
                        "type": "[]",
                        "returnType": "string[]",
                        "line": 67,
                        "rawdescription": "\n\nClasses\n",
                        "description": "<p>Classes</p>\n"
                    }
                },
                "btnWeekly": {
                    "name": "btnWeekly",
                    "getSignature": {
                        "name": "btnWeekly",
                        "type": "[]",
                        "returnType": "string[]",
                        "line": 71
                    }
                },
                "btnMontly": {
                    "name": "btnMontly",
                    "getSignature": {
                        "name": "btnMontly",
                        "type": "[]",
                        "returnType": "string[]",
                        "line": 76
                    }
                }
            }
        }
    ],
    "modules": [],
    "miscellaneous": {
        "variables": [
            {
                "name": "appConfig",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/app.config.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "ApplicationConfig",
                "defaultValue": "{\r\n  providers: [provideZoneChangeDetection({ eventCoalescing: true }), provideRouter(routes), provideAnimationsAsync()]\r\n}"
            }
        ],
        "functions": [],
        "typealiases": [
            {
                "name": "DisplayType",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"weekly\" | \"monthly\" | \"daily\"",
                "file": "src/app/component/exemple/dashboard/interface/time.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 192
            },
            {
                "name": "TypeCard",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"Work\" | \"Play\" | \"Study\" | \"Exercise\" | \"Social\" | \"Self Care\"",
                "file": "src/app/component/exemple/dashboard/interface/time.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 192
            }
        ],
        "enumerations": [],
        "groupedVariables": {
            "src/app/app.config.ts": [
                {
                    "name": "appConfig",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/app.config.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ApplicationConfig",
                    "defaultValue": "{\r\n  providers: [provideZoneChangeDetection({ eventCoalescing: true }), provideRouter(routes), provideAnimationsAsync()]\r\n}"
                }
            ]
        },
        "groupedFunctions": {},
        "groupedEnumerations": {},
        "groupedTypeAliases": {
            "src/app/component/exemple/dashboard/interface/time.ts": [
                {
                    "name": "DisplayType",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"weekly\" | \"monthly\" | \"daily\"",
                    "file": "src/app/component/exemple/dashboard/interface/time.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 192
                },
                {
                    "name": "TypeCard",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"Work\" | \"Play\" | \"Study\" | \"Exercise\" | \"Social\" | \"Self Care\"",
                    "file": "src/app/component/exemple/dashboard/interface/time.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 192
                }
            ]
        }
    },
    "routes": [],
    "coverage": {
        "count": 5,
        "status": "low",
        "files": [
            {
                "filePath": "src/app/app.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AppComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/app.config.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "appConfig",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/component/exemple/adminLTE/card/card.ts",
                "type": "component",
                "linktype": "component",
                "name": "Card",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/component/exemple/dashboard/components/dashboard-card/dashboard-card.ts",
                "type": "component",
                "linktype": "component",
                "name": "DashBoardCard",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/component/exemple/dashboard/components/user-card/user-card.ts",
                "type": "component",
                "linktype": "component",
                "name": "UserCard",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/component/exemple/dashboard/interface/time.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Time",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/component/exemple/dashboard/interface/time.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "TimeFrame",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/component/exemple/dashboard/interface/time.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "User",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/component/exemple/dashboard/layout/dashboard/dashboard.ts",
                "type": "component",
                "linktype": "component",
                "name": "DashboardLayout",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/component/exemple/dashboard/layout/dashboard/no-wrapper.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "NoWrapper",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/component/exemple/form/inputText/inputText.ts",
                "type": "component",
                "linktype": "component",
                "name": "InputText",
                "coveragePercent": 0,
                "coverageCount": "0/12",
                "status": "low"
            },
            {
                "filePath": "src/app/component/exemple/materialUI/icon/icon.ts",
                "type": "component",
                "linktype": "component",
                "name": "Icon",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/component/exemple/materialUI/progressionCard/progressionCard.ts",
                "type": "component",
                "linktype": "component",
                "name": "ProgressionCard",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/component/exemple/materialUI/typo/typo.ts",
                "type": "component",
                "linktype": "component",
                "name": "Typo",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/stories/button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ButtonComponent",
                "coveragePercent": 90,
                "coverageCount": "10/11",
                "status": "very-good"
            },
            {
                "filePath": "src/stories/header.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HeaderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/stories/page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/stories/user.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "User",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            }
        ]
    }
}